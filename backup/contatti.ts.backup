import { Component, inject, signal } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ActivatedRoute } from '@angular/router';
import { map } from 'rxjs';
import { Maps } from '../../components/maps/maps';
import { ContactForm } from '../../components/contact-form/contact-form';
import { Notification, NotificationItem } from '../../components/notification/notification';

@Component({
  selector: 'app-contatti',
  imports: [
    Maps,
    ContactForm,
    Notification
  ],
  templateUrl: './contatti.html',
  styleUrl: './contatti.css'
})
export class Contatti {
  private route = inject(ActivatedRoute);
  title = toSignal(this.route.data.pipe(map(d => d['title'] as string)), { initialValue: '' });
  
  // Gestione notifiche singole
  showNotification = false;
  notificationMessage = '';
  notificationType: 'success' | 'error' | 'warning' | 'info' = 'error';

  // Gestione notifiche multiple
  showMultipleNotifications = false;
  notifications = signal<NotificationItem[]>([]);

  onErrorChange(errorData: {message: string, type: 'error' | 'warning' | 'info' | 'success', fieldId?: string, removeId?: string} | undefined) {
    if (errorData) {
      // Se è una richiesta di rimozione
      if (errorData.removeId) {
        this.removeNotificationByFieldId(errorData.removeId);
        return;
      }

      // Se è una notifica di errore con fieldId, rimuovi eventuali notifiche precedenti per questo campo
      if (errorData.fieldId) {
        this.removeNotificationByFieldId(`form-field-${errorData.fieldId}`);
      }

      // Crea una notifica con il tipo specificato dal form
      const newNotification: NotificationItem = {
        id: errorData.fieldId ? `form-field-${errorData.fieldId}` : `form-${errorData.type}-${Date.now()}`,
        message: errorData.message,
        type: errorData.type,
        timestamp: Date.now()
      };
      
      // Aggiungi alla lista delle notifiche multiple
      this.notifications.set([...this.notifications(), newNotification]);
      this.showMultipleNotifications = true;
      
      console.log('Notifica form aggiunta:', newNotification);
    } else {
      // Se non c'è errore, non fare nulla (mantieni le notifiche esistenti)
      console.log('Notifica form rimossa');
    }
  }

  removeNotificationByFieldId(fieldId: string) {
    // Rimuovi notifiche che corrispondono al fieldId
    const currentNotifications = this.notifications();
    const filteredNotifications = currentNotifications.filter(n => n.id !== fieldId);
    this.notifications.set(filteredNotifications);
    
    console.log(`Rimossa notifica per campo: ${fieldId}`);
  }

  onSuccessChange(success: string | undefined) {
    if (success) {
      // Crea una notifica di successo per il form
      const newNotification: NotificationItem = {
        id: `form-success-${Date.now()}`,
        message: success,
        type: 'success',
        timestamp: Date.now()
      };
      
      // Aggiungi alla lista delle notifiche multiple
      this.notifications.set([...this.notifications(), newNotification]);
      this.showMultipleNotifications = true;
      
      console.log('Successo form aggiunto:', newNotification);
    }
  }

}